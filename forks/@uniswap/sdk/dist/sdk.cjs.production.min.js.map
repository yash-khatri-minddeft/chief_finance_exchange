{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/token.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/trade.ts","../src/entities/pair.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","\nimport { Currency, Token } from '@bidelity/sdk'\nimport { ChainId } from '../constants'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { Currency } from '@bidelity/sdk'\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { ETHER } from './currency'\nimport { currencyEquals, WETH } from './token'\nimport { CurrencyAmount, TokenAmount, Currency, Token, Route, Pair, Fraction, Percent, Price } from '@bidelity/sdk'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n    BigintIsh,\n    FACTORY_ADDRESS,\n    INIT_CODE_HASH,\n    MINIMUM_LIQUIDITY,\n    ZERO,\n    ONE,\n    FIVE,\n    _997,\n    _1000,\n    ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token, TokenAmount, Pair } from '@bidelity/sdk'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class UniPair extends Pair {\n    public readonly liquidityToken: Token\n    private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n    public static getAddress(tokenA: Token, tokenB: Token): string {\n        const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n        if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n            PAIR_ADDRESS_CACHE = {\n                ...PAIR_ADDRESS_CACHE,\n                [tokens[0].address]: {\n                    ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n                    [tokens[1].address]: getCreate2Address(\n                        FACTORY_ADDRESS,\n                        keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n                        INIT_CODE_HASH\n                    )\n                }\n            }\n        }\n\n        return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n    }\n\n    public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n        super(tokenAmountA, tokenAmountB)\n        const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n            ? [tokenAmountA, tokenAmountB]\n            : [tokenAmountB, tokenAmountA]\n        this.liquidityToken = new Token(\n            tokenAmounts[0].token.chainId,\n            UniPair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n            18,\n            'UNI-V2',\n            'Uniswap V2'\n        )\n        this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n    }\n\n    /**\n     * Returns true if the token is either token0 or token1\n     * @param token to check\n     */\n    public involvesToken(token: Token): boolean {\n        return token.equals(this.token0) || token.equals(this.token1)\n    }\n\n    public get chainId(): ChainId {\n        return this.token0.chainId\n    }\n\n    public get token0(): Token {\n        return this.tokenAmounts[0].token\n    }\n\n    public get token1(): Token {\n        return this.tokenAmounts[1].token\n    }\n\n    public get reserve0(): TokenAmount {\n        return this.tokenAmounts[0]\n    }\n\n    public get reserve1(): TokenAmount {\n        return this.tokenAmounts[1]\n    }\n\n    public reserveOf(token: Token): TokenAmount {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.reserve0 : this.reserve1\n    }\n\n    // @ts-ignore\n    public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, UniPair] {\n        invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n        if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n            throw new InsufficientReservesError()\n        }\n        const inputReserve = this.reserveOf(inputAmount.token)\n        const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n        const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n        const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n        const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n        const outputAmount = new TokenAmount(\n            inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n            JSBI.divide(numerator, denominator)\n        )\n        if (JSBI.equal(outputAmount.raw, ZERO)) {\n            throw new InsufficientInputAmountError()\n        }\n        return [outputAmount, new UniPair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n    }\n\n    // @ts-ignore\n    public getInputAmount(outputAmount: TokenAmount): [TokenAmount, UniPair] {\n        invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n        if (\n            JSBI.equal(this.reserve0.raw, ZERO) ||\n            JSBI.equal(this.reserve1.raw, ZERO) ||\n            JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n        ) {\n            throw new InsufficientReservesError()\n        }\n\n        const outputReserve = this.reserveOf(outputAmount.token)\n        const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n        const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n        const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n        const inputAmount = new TokenAmount(\n            outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n            JSBI.add(JSBI.divide(numerator, denominator), ONE)\n        )\n        return [inputAmount, new UniPair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n    }\n\n    public getLiquidityMinted(\n        totalSupply: TokenAmount,\n        tokenAmountA: TokenAmount,\n        tokenAmountB: TokenAmount\n    ): TokenAmount {\n        invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n        const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n            ? [tokenAmountA, tokenAmountB]\n            : [tokenAmountB, tokenAmountA]\n        invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n        let liquidity: JSBI\n        if (JSBI.equal(totalSupply.raw, ZERO)) {\n            liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n        } else {\n            const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n            const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n            liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n        }\n        if (!JSBI.greaterThan(liquidity, ZERO)) {\n            throw new InsufficientInputAmountError()\n        }\n        return new TokenAmount(this.liquidityToken, liquidity)\n    }\n\n    public getLiquidityValue(\n        token: Token,\n        totalSupply: TokenAmount,\n        liquidity: TokenAmount,\n        feeOn: boolean = false,\n        kLast?: BigintIsh\n    ): TokenAmount {\n        invariant(this.involvesToken(token), 'TOKEN')\n        invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n        invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n        invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n        let totalSupplyAdjusted: TokenAmount\n        if (!feeOn) {\n            totalSupplyAdjusted = totalSupply\n        } else {\n            invariant(!!kLast, 'K_LAST')\n            const kLastParsed = parseBigintIsh(kLast)\n            if (!JSBI.equal(kLastParsed, ZERO)) {\n                const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n                const rootKLast = sqrt(kLastParsed)\n                if (JSBI.greaterThan(rootK, rootKLast)) {\n                    const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n                    const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n                    const feeLiquidity = JSBI.divide(numerator, denominator)\n                    totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n                } else {\n                    totalSupplyAdjusted = totalSupply\n                }\n            } else {\n                totalSupplyAdjusted = totalSupply\n            }\n        }\n\n        return new TokenAmount(\n            token,\n            JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n        )\n    }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { ETHER, Trade } from './entities'\nimport { CurrencyAmount, Percent } from '@bidelity/sdk'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { TokenAmount, Token, Pair } from '@bidelity/sdk'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","_997","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","currencyEquals","currencyA","currencyB","Token","equals","WETH","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","sqrt","y","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","ETHER","Currency","inputOutputComparator","a","b","inputAmount","currency","outputAmount","equalTo","tradeComparator","ioComp","priceImpact","route","path","wrappedAmount","currencyAmount","chainId","TokenAmount","raw","wrappedCurrency","Trade","amount","tradeType","exactQuote","slippage","amounts","Array","nextPairs","pairs","EXACT_INPUT","input","i","getOutputAmount","nextPair","output","getInputAmount","CurrencyAmount","ether","EXACT_OUTPUT","executionPrice","Price","this","nextMidPrice","fromRoute","Route","midPrice","multiply","subtract","Percent","numerator","denominator","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","quotient","token","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","undefined","tokenOut","pair","token0","token1","reserve0","reserve1","error","isInsufficientInputAmountError","pairsExcludingThisPair","slice","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","PAIR_ADDRESS_CACHE","UniPair","tokenAmountA","tokenAmountB","tokenAmounts","sortsBefore","liquidityToken","getAddress","tokenA","tokenB","tokens","address","_PAIR_ADDRESS_CACHE2","getCreate2Address","keccak256","pack","involvesToken","reserveOf","equal","inputReserve","outputReserve","inputAmountWithFee","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","bigintIsh","kLastParsed","toString","rootK","rootKLast","feeLiquidity","Pair","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","symbol","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","decimals","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}