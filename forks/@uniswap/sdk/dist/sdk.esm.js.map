{"version":3,"file":"sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/token.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/trade.ts","../src/entities/pair.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","\nimport { Currency, Token } from '@bidelity/sdk'\nimport { ChainId } from '../constants'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { Currency } from '@bidelity/sdk'\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { ETHER } from './currency'\nimport { currencyEquals, WETH } from './token'\nimport { CurrencyAmount, TokenAmount, Currency, Token, Route, Pair, Fraction, Percent, Price } from '@bidelity/sdk'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n    BigintIsh,\n    FACTORY_ADDRESS,\n    INIT_CODE_HASH,\n    MINIMUM_LIQUIDITY,\n    ZERO,\n    ONE,\n    FIVE,\n    _997,\n    _1000,\n    ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token, TokenAmount, Pair } from '@bidelity/sdk'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class UniPair extends Pair {\n    public readonly liquidityToken: Token\n    private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n    public static getAddress(tokenA: Token, tokenB: Token): string {\n        const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n        if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n            PAIR_ADDRESS_CACHE = {\n                ...PAIR_ADDRESS_CACHE,\n                [tokens[0].address]: {\n                    ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n                    [tokens[1].address]: getCreate2Address(\n                        FACTORY_ADDRESS,\n                        keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n                        INIT_CODE_HASH\n                    )\n                }\n            }\n        }\n\n        return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n    }\n\n    public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n        super(tokenAmountA, tokenAmountB)\n        const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n            ? [tokenAmountA, tokenAmountB]\n            : [tokenAmountB, tokenAmountA]\n        this.liquidityToken = new Token(\n            tokenAmounts[0].token.chainId,\n            UniPair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n            18,\n            'UNI-V2',\n            'Uniswap V2'\n        )\n        this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n    }\n\n    /**\n     * Returns true if the token is either token0 or token1\n     * @param token to check\n     */\n    public involvesToken(token: Token): boolean {\n        return token.equals(this.token0) || token.equals(this.token1)\n    }\n\n    public get chainId(): ChainId {\n        return this.token0.chainId\n    }\n\n    public get token0(): Token {\n        return this.tokenAmounts[0].token\n    }\n\n    public get token1(): Token {\n        return this.tokenAmounts[1].token\n    }\n\n    public get reserve0(): TokenAmount {\n        return this.tokenAmounts[0]\n    }\n\n    public get reserve1(): TokenAmount {\n        return this.tokenAmounts[1]\n    }\n\n    public reserveOf(token: Token): TokenAmount {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.reserve0 : this.reserve1\n    }\n\n    // @ts-ignore\n    public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, UniPair] {\n        invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n        if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n            throw new InsufficientReservesError()\n        }\n        const inputReserve = this.reserveOf(inputAmount.token)\n        const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n        const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n        const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n        const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n        const outputAmount = new TokenAmount(\n            inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n            JSBI.divide(numerator, denominator)\n        )\n        if (JSBI.equal(outputAmount.raw, ZERO)) {\n            throw new InsufficientInputAmountError()\n        }\n        return [outputAmount, new UniPair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n    }\n\n    // @ts-ignore\n    public getInputAmount(outputAmount: TokenAmount): [TokenAmount, UniPair] {\n        invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n        if (\n            JSBI.equal(this.reserve0.raw, ZERO) ||\n            JSBI.equal(this.reserve1.raw, ZERO) ||\n            JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n        ) {\n            throw new InsufficientReservesError()\n        }\n\n        const outputReserve = this.reserveOf(outputAmount.token)\n        const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n        const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n        const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n        const inputAmount = new TokenAmount(\n            outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n            JSBI.add(JSBI.divide(numerator, denominator), ONE)\n        )\n        return [inputAmount, new UniPair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n    }\n\n    public getLiquidityMinted(\n        totalSupply: TokenAmount,\n        tokenAmountA: TokenAmount,\n        tokenAmountB: TokenAmount\n    ): TokenAmount {\n        invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n        const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n            ? [tokenAmountA, tokenAmountB]\n            : [tokenAmountB, tokenAmountA]\n        invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n        let liquidity: JSBI\n        if (JSBI.equal(totalSupply.raw, ZERO)) {\n            liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n        } else {\n            const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n            const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n            liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n        }\n        if (!JSBI.greaterThan(liquidity, ZERO)) {\n            throw new InsufficientInputAmountError()\n        }\n        return new TokenAmount(this.liquidityToken, liquidity)\n    }\n\n    public getLiquidityValue(\n        token: Token,\n        totalSupply: TokenAmount,\n        liquidity: TokenAmount,\n        feeOn: boolean = false,\n        kLast?: BigintIsh\n    ): TokenAmount {\n        invariant(this.involvesToken(token), 'TOKEN')\n        invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n        invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n        invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n        let totalSupplyAdjusted: TokenAmount\n        if (!feeOn) {\n            totalSupplyAdjusted = totalSupply\n        } else {\n            invariant(!!kLast, 'K_LAST')\n            const kLastParsed = parseBigintIsh(kLast)\n            if (!JSBI.equal(kLastParsed, ZERO)) {\n                const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n                const rootKLast = sqrt(kLastParsed)\n                if (JSBI.greaterThan(rootK, rootKLast)) {\n                    const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n                    const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n                    const feeLiquidity = JSBI.divide(numerator, denominator)\n                    totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n                } else {\n                    totalSupplyAdjusted = totalSupply\n                }\n            } else {\n                totalSupplyAdjusted = totalSupply\n            }\n        }\n\n        return new TokenAmount(\n            token,\n            JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n        )\n    }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { ETHER, Trade } from './entities'\nimport { CurrencyAmount, Percent } from '@bidelity/sdk'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { TokenAmount, Token, Pair } from '@bidelity/sdk'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","currencyEquals","currencyA","currencyB","Token","equals","WETH","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","ETHER","Currency","computePriceImpact","midPrice","inputAmount","outputAmount","exactQuote","raw","multiply","slippage","subtract","Percent","numerator","denominator","inputOutputComparator","a","b","currency","equalTo","tradeComparator","ioComp","priceImpact","route","path","wrappedAmount","currencyAmount","chainId","TokenAmount","wrappedCurrency","Trade","amount","tradeType","amounts","Array","nextPairs","pairs","EXACT_INPUT","input","i","pair","getOutputAmount","nextPair","output","getInputAmount","CurrencyAmount","ether","EXACT_OUTPUT","executionPrice","Price","nextMidPrice","fromRoute","Route","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","quotient","token","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","undefined","tokenOut","token0","token1","reserve0","reserve1","isInsufficientInputAmountError","pairsExcludingThisPair","slice","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","PAIR_ADDRESS_CACHE","UniPair","tokenAmountA","tokenAmountB","tokenAmounts","sortsBefore","liquidityToken","tokenA","tokenB","tokens","getCreate2Address","keccak256","pack","involvesToken","reserveOf","equal","inputReserve","outputReserve","inputAmountWithFee","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Pair","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","symbol","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","decimals","then","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}